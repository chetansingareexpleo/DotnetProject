∆
BC:\Users\csingare\Desktop\MyWarehouse\src\Domain\AssemblyConfig.cs
[ 
assembly 	
:	 

InternalsVisibleTo 
( 
$str <
)< =
]= >
	namespace 

MyWarehouse 
. 
Domain 
{ 
}  !Ò
CC:\Users\csingare\Desktop\MyWarehouse\src\Domain\Common\IAudited.cs
	namespace 	
MyWarehouse
 
. 
Domain 
. 
Common #
;# $
public 
	interface 
IAudited 
{ 
string 

	CreatedBy 
{ 
get 
; 
} 
DateTime 
	CreatedAt 
{ 
get 
; 
} 
string		 

?		
 
LastModifiedBy		 
{		 
get		  
;		  !
}		" #
DateTime 
? 
LastModifiedAt 
{ 
get "
;" #
}$ %
} ˛
BC:\Users\csingare\Desktop\MyWarehouse\src\Domain\Common\IEntity.cs
	namespace 	
MyWarehouse
 
. 
Domain 
. 
Common #
;# $
public 
	interface 
IEntity 
{ 
int 
Id 

{ 
get 
; 
} 
} «
IC:\Users\csingare\Desktop\MyWarehouse\src\Domain\Common\ISoftDeletable.cs
	namespace 	
MyWarehouse
 
. 
Domain 
. 
Common #
;# $
public 
	interface 
ISoftDeletable 
{ 
public 

string 
? 
	DeletedBy 
{ 
get "
;" #
}$ %
public 

DateTime 
? 
	DeletedAt 
{  
get! $
;$ %
}& '
} Ü
CC:\Users\csingare\Desktop\MyWarehouse\src\Domain\Common\MyEntity.cs
	namespace 	
MyWarehouse
 
. 
Domain 
. 
Common #
;# $
public 
abstract 
class 
MyEntity 
:  
IEntity! (
,( )
ISoftDeletable* 8
,8 9
IAudited: B
{ 
public 

int 
Id 
{ 
get 
; 
private  
set! $
;$ %
}& '
public 

string 
	CreatedBy 
{ 
get !
;! "
private# *
set+ .
;. /
}0 1
=2 3
null4 8
!8 9
;9 :
public		 

DateTime		 
	CreatedAt		 
{		 
get		  #
;		# $
private		% ,
set		- 0
;		0 1
}		2 3
public 

string 
? 
LastModifiedBy !
{" #
get$ '
;' (
private) 0
set1 4
;4 5
}6 7
public 

DateTime 
? 
LastModifiedAt #
{$ %
get& )
;) *
private+ 2
set3 6
;6 7
}8 9
public 

string 
? 
	DeletedBy 
{ 
get "
;" #
private$ +
set, /
;/ 0
}1 2
public 

DateTime 
? 
	DeletedAt 
{  
get! $
;$ %
private& -
set. 1
;1 2
}3 4
} Å
QC:\Users\csingare\Desktop\MyWarehouse\src\Domain\Common\ValueObjects\Mass\Mass.cs
	namespace 	
MyWarehouse
 
. 
Domain 
. 
Common #
.# $
ValueObjects$ 0
.0 1
Mass1 5
;5 6
public 
record 
Mass 
{ 
public 

float 
Value 
{ 
get 
; 
init "
;" #
}$ %
[ 
Required 
] 
public 

MassUnit 
Unit 
{ 
get 
; 
init  $
;$ %
}& '
public

 

Mass

 
(

 
float

 
value

 
,

 
MassUnit

 %
unit

& *
)

* +
{ 
if 

( 
value 
< 
$num 
) 
throw 
new 
ArgumentException '
(' (
$str( B
,B C
nameofD J
(J K
valueK P
)P Q
)Q R
;R S
Value 
= 
value 
; 
Unit 
= 
unit 
; 
} 
public 

Mass 
	ConvertTo 
( 
MassUnit "
newUnit# *
)* +
{ 
if 

( 
newUnit 
== 
Unit 
) 
return 
this 
; 
return 
new 
Mass 
( 
value 
: 
Value 
* 
Unit 
.   
ConversionRateToGram  4
/5 6
newUnit7 >
.> ? 
ConversionRateToGram? S
,S T
unit 
: 
newUnit 
) 	
;	 

} 
public 

override 
string 
ToString #
(# $
)$ %
=> 

$" 
{ 
Value 
: 
$str 
} 
$str 
{ 
Unit 
. 
Symbol #
}# $
"$ %
;% &
}   Õ
UC:\Users\csingare\Desktop\MyWarehouse\src\Domain\Common\ValueObjects\Mass\MassUnit.cs
	namespace 	
MyWarehouse
 
. 
Domain 
. 
Common #
.# $
ValueObjects$ 0
.0 1
Mass1 5
;5 6
public 
record 
MassUnit 
{ 
public 

string 
Name 
{ 
get 
; 
init "
;" #
}$ %
public 

string 
Symbol 
{ 
get 
; 
init  $
;$ %
}& '
public 

float  
ConversionRateToGram %
{& '
get( +
;+ ,
init- 1
;1 2
}3 4
private		 
MassUnit		 
(		 
string		 
name		  
,		  !
string		" (
symbol		) /
,		/ 0
float		1 6 
conversionRateToGram		7 K
)		K L
{

 
( 	
Name	 
, 
Symbol 
,  
ConversionRateToGram +
)+ ,
=- .
(/ 0
name0 4
,4 5
symbol6 <
,< = 
conversionRateToGram> R
)R S
;S T
} 
public 

static 
readonly 
MassUnit #
Tonne$ )
=0 1
new2 5
(5 6
$str6 =
,= >
$str? B
,B C
$numD L
)L M
;M N
public 

static 
readonly 
MassUnit #
Kilogram$ ,
=0 1
new2 5
(5 6
$str6 @
,@ A
$strB F
,F G
$numH M
)M N
;N O
public 

static 
readonly 
MassUnit #
Gram$ (
=0 1
new2 5
(5 6
$str6 <
,< =
$str> A
,A B
$numC E
)E F
;F G
public 

static 
readonly 
MassUnit #
Pound$ )
=0 1
new2 5
(5 6
$str6 =
,= >
$str? C
,C D
$numE O
)O P
;P Q
public 

static 
MassUnit 

FromSymbol %
(% &
string& ,

unitSymbol- 7
)7 8
=> 


unitSymbol 
. 
ToLower 
( 
) 
switch  &
{ 	
$str 
=> 
Tonne 
, 
$str 
=> 
Kilogram 
, 
$str 
=> 
Gram 
, 
$str 
=> 
Pound 
, 
_ 
=> 
throw 
new 
ArgumentException ,
(, -
$"- /
$str/ 6
{6 7
nameof7 =
(= >
MassUnit> F
)F G
}G H
$strH P
{P Q

unitSymbolQ [
}[ \
$str\ ^
"^ _
,_ `
nameofa g
(g h

unitSymbolh r
)r s
)s t
} 	
;	 

} ∂J
VC:\Users\csingare\Desktop\MyWarehouse\src\Domain\Common\ValueObjects\Money\Currency.cs
	namespace 	
MyWarehouse
 
. 
Domain 
. 
Common #
.# $
ValueObjects$ 0
.0 1
Money1 6
;6 7
public 
record 
Currency 
{ 
public 

string 
Code 
{ 
get 
; 
init "
;" #
}$ %
public		 

string		 
Symbol		 
{		 
get		 
;		 
init		  $
;		$ %
}		& '
public

 

bool

 
SymbolWellKnown

 
{

  !
get

" %
;

% &
init

' +
;

+ ,
}

- .
=

/ 0
false

1 6
;

6 7
private 
static 
readonly 
IReadOnlyDictionary /
</ 0
string0 6
,6 7
Record8 >
>> ?
_lookup@ G
=H I
newJ M

DictionaryN X
<X Y
stringY _
,_ `
Recorda g
>g h
(h i
)i j
{ 
[ 	
$str	 
] 
= 
new 
Record 
( 
$str "
," #
$str$ '
,' (
symbolWellKnown) 8
:8 9
true: >
)> ?
,? @
[ 	
$str	 
] 
= 
new 
Record 
( 
$str "
," #
$str$ '
,' (
symbolWellKnown) 8
:8 9
true: >
)> ?
,? @
[ 	
$str	 
] 
= 
new 
Record 
( 
$str "
," #
$str$ '
,' (
symbolWellKnown) 8
:8 9
true: >
)> ?
,? @
[ 	
$str	 
] 
= 
new 
Record 
( 
$str "
," #
$str$ '
,' (
symbolWellKnown) 8
:8 9
true: >
)> ?
,? @
[ 	
$str	 
] 
= 
new 
Record 
( 
$str "
," #
$str$ (
)( )
,) *
[ 	
$str	 
] 
= 
new 
Record 
( 
$str "
," #
$str$ (
)( )
,) *
[ 	
$str	 
] 
= 
new 
Record 
( 
$str "
," #
$str$ )
)) *
,* +
[ 	
$str	 
] 
= 
new 
Record 
( 
$str "
," #
$str$ )
)) *
,* +
[ 	
$str	 
] 
= 
new 
Record 
( 
$str "
," #
$str$ '
)' (
,( )
[ 	
$str	 
] 
= 
new 
Record 
( 
$str "
," #
$str$ (
)( )
,) *
} 
; 
private 
Currency 
( 
Record 
record "
)" #
=> 
( 	
Code	 
, 
Symbol 
, 
SymbolWellKnown &
)& '
=( )
(* +
record+ 1
.1 2
Code2 6
,6 7
record8 >
.> ?
Symbol? E
,E F
recordG M
.M N
SymbolWellKnownN ]
)] ^
;^ _
public"" 

static"" 
Currency"" 
FromCode"" #
(""# $
string""$ *
code""+ /
)""/ 0
{## 
if$$ 

($$ 
!$$ 
_lookup$$ 
.$$ 
TryGetValue$$  
($$  !
code$$! %
.$$% &
ToUpper$$& -
($$- .
)$$. /
,$$/ 0
out$$1 4
var$$5 8
record$$9 ?
)$$? @
)$$@ A
throw%% 
new%% 
ArgumentException%% '
(%%' (
$"%%( *
$str%%* 0
{%%0 1
code%%1 5
}%%5 6
$str%%6 \
"%%\ ]
,%%] ^
nameof%%_ e
(%%e f
code%%f j
)%%j k
)%%k l
;%%l m
return'' 
new'' 
Currency'' 
('' 
record'' "
)''" #
;''# $
}(( 
public** 

static** 
bool** 
IsValidCurrencyCode** *
(*** +
string**+ 1
code**2 6
)**6 7
=>++ 

_lookup++ 
.++ 
ContainsKey++ 
(++ 
code++ #
)++# $
;++$ %
public-- 

static-- 
List-- 
<-- 
Currency-- 
>--  
GetAllCurrencies--! 1
=>.. 

_lookup.. 
... 
Select.. 
(.. 
x.. 
=>.. 
new.. "
Currency..# +
(..+ ,
x.., -
...- .
Value... 3
)..3 4
)..4 5
...5 6
ToList..6 <
(..< =
)..= >
;..> ?
public00 

override00 
string00 
ToString00 #
(00# $
)00$ %
=>11 

Code11 
;11 
public66 

static66 
Currency66 
Default66 "
=>66# %
USD66& )
;66) *
public88 

static88 
Currency88 
USD88 
=88  
new88! $
Currency88% -
(88- .
_lookup88. 5
[885 6
$str886 ;
]88; <
)88< =
;88= >
public99 

static99 
Currency99 
EUR99 
=99  
new99! $
Currency99% -
(99- .
_lookup99. 5
[995 6
$str996 ;
]99; <
)99< =
;99= >
public:: 

static:: 
Currency:: 
JPY:: 
=::  
new::! $
Currency::% -
(::- .
_lookup::. 5
[::5 6
$str::6 ;
]::; <
)::< =
;::= >
public;; 

static;; 
Currency;; 
GBP;; 
=;;  
new;;! $
Currency;;% -
(;;- .
_lookup;;. 5
[;;5 6
$str;;6 ;
];;; <
);;< =
;;;= >
public<< 

static<< 
Currency<< 
CAD<< 
=<<  
new<<! $
Currency<<% -
(<<- .
_lookup<<. 5
[<<5 6
$str<<6 ;
]<<; <
)<<< =
;<<= >
public== 

static== 
Currency== 
AUD== 
===  
new==! $
Currency==% -
(==- .
_lookup==. 5
[==5 6
$str==6 ;
]==; <
)==< =
;=== >
public>> 

static>> 
Currency>> 
CHF>> 
=>>  
new>>! $
Currency>>% -
(>>- .
_lookup>>. 5
[>>5 6
$str>>6 ;
]>>; <
)>>< =
;>>= >
public?? 

static?? 
Currency?? 
NZD?? 
=??  
new??! $
Currency??% -
(??- .
_lookup??. 5
[??5 6
$str??6 ;
]??; <
)??< =
;??= >
public@@ 

static@@ 
Currency@@ 
RUB@@ 
=@@  
new@@! $
Currency@@% -
(@@- .
_lookup@@. 5
[@@5 6
$str@@6 ;
]@@; <
)@@< =
;@@= >
publicAA 

staticAA 
CurrencyAA 
HUFAA 
=AA  
newAA! $
CurrencyAA% -
(AA- .
_lookupAA. 5
[AA5 6
$strAA6 ;
]AA; <
)AA< =
;AA= >
privateCC 
readonlyCC 
structCC 
RecordCC "
{DD 
publicEE 
readonlyEE 
stringEE 
CodeEE #
;EE# $
publicFF 
readonlyFF 
stringFF 
SymbolFF %
;FF% &
publicGG 
readonlyGG 
boolGG 
SymbolWellKnownGG ,
;GG, -
publicII 
RecordII 
(II 
stringII 
codeII !
,II! "
stringII# )
symbolII* 0
,II0 1
boolII2 6
symbolWellKnownII7 F
=IIG H
falseIII N
)IIN O
=>JJ 
(JJ 
CodeJJ 
,JJ 
SymbolJJ 
,JJ 
SymbolWellKnownJJ -
)JJ- .
=JJ/ 0
(JJ1 2
codeJJ2 6
,JJ6 7
symbolJJ8 >
,JJ> ?
symbolWellKnownJJ@ O
)JJO P
;JJP Q
}KK 
}LL »;
SC:\Users\csingare\Desktop\MyWarehouse\src\Domain\Common\ValueObjects\Money\Money.cs
	namespace 	
MyWarehouse
 
. 
Domain 
. 
Common #
.# $
ValueObjects$ 0
.0 1
Money1 6
;6 7
public 
record 
Money 
{ 
public 

decimal 
Amount 
{ 
get 
;  
init! %
;% &
}' (
[

 
Required

 
]

 
public 

Currency 
Currency 
{ 
get "
;" #
init$ (
;( )
}* +
public 

Money 
( 
decimal 
amount 
,  
Currency! )
currency* 2
)2 3
{ 
if 

( 
amount 
< 
$num 
) 
throw 
new !
ArgumentException" 3
(3 4
$str4 O
,O P
nameofQ W
(W X
amountX ^
)^ _
)_ `
;` a
if 

( 
currency 
== 
null 
) 
throw #
new$ '!
ArgumentNullException( =
(= >
nameof> D
(D E
currencyE M
)M N
)N O
;O P
( 	
Amount	 
, 
Currency 
) 
= 
( 
amount $
,$ %
currency& .
). /
;/ 0
} 
public 

Money 
Copy 
( 
) 
=> 

new 
Money 
( 
this 
. 
Amount  
,  !
this" &
.& '
Currency' /
)/ 0
;0 1
public 

Money 
	AddAmount 
( 
decimal "
amount# )
)) *
=> 

new 
Money 
( 
Amount 
+ 
amount $
,$ %
Currency& .
). /
;/ 0
public 

static 
Money 
operator  
+! "
(" #
Money# (
left) -
,- .
Money/ 4
right5 :
): ;
{ 
if 

( 
! 
Equals 
( 
left 
. 
Currency !
,! "
right# (
.( )
Currency) 1
)1 2
)2 3
throw 
new %
InvalidOperationException /
(/ 0
$"0 2
$str2 k
{k l
leftl p
.p q
Currencyq y
}y z
$str	z ä
{
ä ã
right
ã ê
.
ê ë
Currency
ë ô
}
ô ö
$str
ö ú
"
ú ù
)
ù û
;
û ü
return   
left   
.   
	AddAmount   
(   
right   #
.  # $
Amount  $ *
)  * +
;  + ,
}!! 
public## 

static## 
Money## 
operator##  
-##! "
(##" #
Money### (
left##) -
,##- .
Money##/ 4
right##5 :
)##: ;
{$$ 
if%% 

(%% 
!%% 
Equals%% 
(%% 
left%% 
.%% 
Currency%% !
,%%! "
right%%# (
.%%( )
Currency%%) 1
)%%1 2
)%%2 3
throw&& 
new&& %
InvalidOperationException&& /
(&&/ 0
$"&&0 2
$str&&2 p
{&&p q
left&&q u
.&&u v
Currency&&v ~
}&&~ 
$str	&& è
{
&&è ê
right
&&ê ï
.
&&ï ñ
Currency
&&ñ û
}
&&û ü
$str
&&ü °
"
&&° ¢
)
&&¢ £
;
&&£ §
return(( 
left(( 
.(( 
	AddAmount(( 
((( 
-(( 
right(( $
.(($ %
Amount((% +
)((+ ,
;((, -
})) 
public++ 

static++ 
Money++ 
operator++  
*++! "
(++" #
Money++# (
left++) -
,++- .
Money++/ 4
right++5 :
)++: ;
{,, 
if-- 

(-- 
!-- 
Equals-- 
(-- 
left-- 
.-- 
Currency-- !
,--! "
right--# (
.--( )
Currency--) 1
)--1 2
)--2 3
throw.. 
new.. %
InvalidOperationException.. /
(../ 0
$str..0 
)	.. Ä
;
..Ä Å
return00 
new00 
Money00 
(00 
left00 
.00 
Amount00 $
*00% &
right00' ,
.00, -
Amount00- 3
,003 4
left005 9
.009 :
Currency00: B
)00B C
;00C D
}11 
public33 

static33 
Money33 
operator33  
*33! "
(33" #
int33# &
scalar33' -
,33- .
Money33/ 4
money335 :
)33: ;
=>44 

new44 
Money44 
(44 
money44 
.44 
Amount44 !
*44" #
scalar44$ *
,44* +
money44, 1
.441 2
Currency442 :
)44: ;
;44; <
public66 

static66 
Money66 
operator66  
*66! "
(66" #
Money66# (
money66) .
,66. /
int660 3
scalar664 :
)66: ;
=>77 

scalar77 
*77 
money77 
;77 
public99 

static99 
Money99 
operator99  
*99! "
(99" #
decimal99# *
scalar99+ 1
,991 2
Money993 8
money999 >
)99> ?
=>:: 

new:: 
Money:: 
(:: 
money:: 
.:: 
Amount:: !
*::" #
scalar::$ *
,::* +
money::, 1
.::1 2
Currency::2 :
)::: ;
;::; <
public<< 

static<< 
Money<< 
operator<<  
*<<! "
(<<" #
Money<<# (
money<<) .
,<<. /
decimal<<0 7
scalar<<8 >
)<<> ?
=>== 

scalar== 
*== 
money== 
;== 
public?? 

override?? 
string?? 
ToString?? #
(??# $
)??$ %
=>@@ 

string@@ 
.@@ 
Format@@ 
(@@ 
$str@@ &
,@@& '
CurrencyAA 
.AA 
SymbolWellKnownAA $
?AA% &
CurrencyAA' /
.AA/ 0
SymbolAA0 6
:AA7 8
CurrencyAA9 A
.AAA B
CodeAAB F
,AAF G
CurrencyBB 
.BB 
SymbolWellKnownBB $
?BB% &
nullBB' +
:BB, -
$strBB. 1
,BB1 2
AmountCC 
)CC 
;CC 
}DD •
YC:\Users\csingare\Desktop\MyWarehouse\src\Domain\Exceptions\InsufficientStockException.cs
	namespace 	
MyWarehouse
 
. 
Domain 
. 

Exceptions '
;' (
public 
class &
InsufficientStockException '
:( )
	Exception* 3
{ 
public 

string 
ProductName 
{ 
get  #
;# $
}% &
public 

int 
RequestedQuantity  
{! "
get# &
;& '
}( )
public		 

int		 
ActualQuantity		 
{		 
get		  #
;		# $
}		% &
public 
&
InsufficientStockException %
(% &
Product& -
product. 5
,5 6
int7 :
requestedQuantity; L
,L M
intN Q
actualQuantityR `
)` a
: 	
base
 
( 
$" 
$str .
{. /
requestedQuantity/ @
}@ A
$strA Q
{Q R
productR Y
.Y Z
NameZ ^
}^ _
$str_ z
{z {
actualQuantity	{ â
}
â ä
$str
ä å
"
å ç
)
ç é
{ 
ProductName 
= 
product 
. 
Name "
;" #
RequestedQuantity 
= 
requestedQuantity -
;- .
ActualQuantity 
= 
actualQuantity '
;' (
} 
} B
@C:\Users\csingare\Desktop\MyWarehouse\src\Domain\GlobalUsings.cs◊
DC:\Users\csingare\Desktop\MyWarehouse\src\Domain\Partners\Address.cs
	namespace 	
MyWarehouse
 
. 
Domain 
. 
Partners %
;% &
public 
record 
Address 
{ 
[ 
Required 
, 
	MinLength 
( 
$num 
) 
, 
	MaxLength &
(& '
$num' *
)* +
]+ ,
public		 

string		 
Street		 
{		 
get		 
;		 
init		  $
;		$ %
}		& '
[ 
Required 
, 
	MinLength 
( 
$num 
) 
, 
	MaxLength &
(& '
$num' *
)* +
]+ ,
public 

string 
City 
{ 
get 
; 
init "
;" #
}$ %
[ 
Required 
, 
	MinLength 
( 
$num 
) 
, 
	MaxLength &
(& '
$num' *
)* +
]+ ,
public 

string 
Country 
{ 
get 
;  
init! %
;% &
}' (
[ 
Required 
, 
	MinLength 
( 
$num 
) 
, 
	MaxLength &
(& '
$num' *
)* +
]+ ,
public 

string 
ZipCode 
{ 
get 
;  
init! %
;% &
}' (
private 
Address 
( 
) 
{ 
Street 
= 
City 
= 
Country 
=  !
ZipCode" )
=* +
default, 3
!3 4
;4 5
} 
public 

Address 
( 
string 
street  
,  !
string" (
city) -
,- .
string/ 5
country6 =
,= >
string? E
zipcodeF M
)M N
=> 

( 
Street 
, 
City 
, 
Country !
,! "
ZipCode# *
)* +
=, -
(. /
street/ 5
,5 6
city7 ;
,; <
country= D
,D E
zipcodeF M
)M N
;N O
public 

override 
string 
ToString #
(# $
)$ %
=> 

$" 
{ 
Street 
} 
$str 
{ 
ZipCode 
}  
$str  !
{! "
City" &
}& '
$str' )
{) *
Country* 1
}1 2
"2 3
;3 4
} ◊7
DC:\Users\csingare\Desktop\MyWarehouse\src\Domain\Partners\Partner.cs
	namespace 	
MyWarehouse
 
. 
Domain 
. 
Partners %
;% &
public 
class 
Partner 
: 
MyEntity 
{ 
[ 
Required 
] 
[ 
StringLength 
( 
PartnerInvariants #
.# $
NameMaxLength$ 1
)1 2
]2 3
public 

string 
Name 
{ 
get 
; 
private %
set& )
;) *
}+ ,
[ 
Required 
] 
public 

Address 
Address 
{ 
get  
;  !
private" )
set* -
;- .
}/ 0
public 

virtual 
IReadOnlyCollection &
<& '
Transaction' 2
>2 3
Transactions4 @
=>A C
_transactionsD Q
.Q R

AsReadOnlyR \
(\ ]
)] ^
;^ _
private 
List 
< 
Transaction 
> 
_transactions +
=, -
new. 1
(1 2
)2 3
;3 4
private 
Partner 
( 
) 
{ 
Name 
= 
default 
! 
; 
Address 
= 
default 
! 
; 
} 
public 

Partner 
( 
string 
name 
, 
Address  '
address( /
)/ 0
{ 

UpdateName   
(   
name   
)   
;   
UpdateAddress!! 
(!! 
address!! 
)!! 
;!! 
}"" 
public'' 

Transaction'' 
SellTo'' 
('' 
IEnumerable'' )
<'') *
(''* +
Product''+ 2
product''3 :
,'': ;
int''< ?
quantity''@ H
)''H I
>''I J
items''K P
)''P Q
=>(( 

CreateTransaction(( 
((( 
items(( "
,((" #
TransactionType(($ 3
.((3 4
Sales((4 9
)((9 :
;((: ;
public-- 

Transaction-- 
ProcureFrom-- "
(--" #
IEnumerable--# .
<--. /
(--/ 0
Product--0 7
product--8 ?
,--? @
int--A D
quantity--E M
)--M N
>--N O
items--P U
)--U V
=>.. 

CreateTransaction.. 
(.. 
items.. "
,.." #
TransactionType..$ 3
...3 4
Procurement..4 ?
)..? @
;..@ A
[00 
MemberNotNull00 
(00 
nameof00 
(00 
Name00 
)00 
)00  
]00  !
public11 

void11 

UpdateName11 
(11 
string11 !
value11" '
)11' (
{22 
if33 

(33 
string33 
.33 
IsNullOrWhiteSpace33 %
(33% &
value33& +
)33+ ,
)33, -
throw44 
new44 
ArgumentException44 '
(44' (
$str44( ?
)44? @
;44@ A
if66 

(66 
value66 
.66 
Length66 
>66 
PartnerInvariants66 ,
.66, -
NameMaxLength66- :
)66: ;
throw77 
new77 
ArgumentException77 '
(77' (
$"77( *
$str77* ;
{77; <
value77< A
.77A B
Length77B H
}77H I
$str77I h
{77h i
ProductInvariants77i z
.77z {
NameMaxLength	77{ à
}
77à â
$str
77â ã
"
77ã å
)
77å ç
;
77ç é
Name99 
=99 
value99 
;99 
}:: 
[<< 
MemberNotNull<< 
(<< 
nameof<< 
(<< 
Address<< !
)<<! "
)<<" #
]<<# $
public== 

void== 
UpdateAddress== 
(== 
Address== %
address==& -
)==- .
{>> 
Address?? 
=?? 
address?? 
???? 
throw?? "
new??# &!
ArgumentNullException??' <
(??< =
nameof??= C
(??C D
address??D K
)??K L
)??L M
;??M N
}@@ 
privateBB 
TransactionBB 
CreateTransactionBB )
(BB) *
IEnumerableBB* 5
<BB5 6
(BB6 7
ProductBB7 >
productBB? F
,BBF G
intBBH K
quantityBBL T
)BBT U
>BBU V
itemsBBW \
,BB\ ]
TransactionTypeBB^ m
transactionTypeBBn }
)BB} ~
{CC 
ifDD 

(DD 
itemsDD 
==DD 
nullDD 
)DD 
throwEE 
newEE !
ArgumentNullExceptionEE +
(EE+ ,
nameofEE, 2
(EE2 3
itemsEE3 8
)EE8 9
)EE9 :
;EE: ;
ifGG 

(GG 
!GG 
itemsGG 
.GG 
AnyGG 
(GG 
)GG 
||GG 
itemsGG !
.GG! "
AnyGG" %
(GG% &
xGG& '
=>GG( *
xGG+ ,
.GG, -
productGG- 4
==GG5 7
nullGG8 <
||GG= ?
xGG@ A
.GGA B
quantityGGB J
<GGK L
$numGGM N
)GGN O
)GGO P
throwHH 
newHH 
ArgumentExceptionHH '
(HH' (
$str	HH( É
,
HHÉ Ñ
nameof
HHÖ ã
(
HHã å
items
HHå ë
)
HHë í
)
HHí ì
;
HHì î
varJJ 
transactionJJ 
=JJ 
newJJ 
TransactionJJ )
(JJ) *
typeKK 
:KK 
transactionTypeKK !
,KK! "
partnerLL 
:LL 
thisLL 
)MM 	
;MM	 

foreachOO 
(OO 
varOO 
(OO 
productOO 
,OO 
quantityOO '
)OO' (
inOO) +
itemsOO, 1
)OO1 2
{PP 	
transactionQQ 
.QQ 
AddTransactionLineQQ *
(QQ* +
productQQ+ 2
,QQ2 3
quantityQQ4 <
)QQ< =
;QQ= >
}RR 	
_transactionsTT 
.TT 
AddTT 
(TT 
transactionTT %
)TT% &
;TT& '
returnVV 
transactionVV 
;VV 
}WW 
}XX  
NC:\Users\csingare\Desktop\MyWarehouse\src\Domain\Partners\PartnerInvariants.cs
	namespace 	
MyWarehouse
 
. 
Domain 
. 
Partners %
;% &
public 
static 
class 
PartnerInvariants %
{ 
public 

const 
int 
NameMaxLength "
=# $
$num% (
;( )
} £S
DC:\Users\csingare\Desktop\MyWarehouse\src\Domain\Products\Product.cs
	namespace 	
MyWarehouse
 
. 
Domain 
. 
Products %
;% &
public

 
class

 
Product

 
:

 
MyEntity

 
{ 
[ 
Required 
] 
[ 
StringLength 
( 
ProductInvariants #
.# $
NameMaxLength$ 1
)1 2
]2 3
public 

string 
Name 
{ 
get 
; 
private %
set& )
;) *
}+ ,
[ 
Required 
] 
[ 
StringLength 
( 
ProductInvariants #
.# $ 
DescriptionMaxLength$ 8
)8 9
]9 :
public 

string 
Description 
{ 
get  #
;# $
private% ,
set- 0
;0 1
}2 3
[ 
Required 
] 
public 

Money 
Price 
{ 
get 
; 
private %
set& )
;) *
}+ ,
[ 
Required 
] 
public 

Mass 
Mass 
{ 
get 
; 
private #
set$ '
;' (
}) *
public 

int 
NumberInStock 
{ 
get "
;" #
private$ +
set, /
;/ 0
}1 2
private 
Product 
( 
) 
{ 
Name 
= 
null 
! 
; 
Description   
=   
null   
!   
;   
Mass!! 
=!! 
null!! 
!!! 
;!! 
Price"" 
="" 
null"" 
!"" 
;"" 
}## 
public%% 

Product%% 
(%% 
string%% 
name%% 
,%% 
string%%  &
description%%' 2
,%%2 3
Money%%4 9
price%%: ?
,%%? @
Mass%%A E
mass%%F J
)%%J K
{&& 

UpdateName'' 
('' 
name'' 
)'' 
;'' 
UpdateDescription(( 
((( 
description(( %
)((% &
;((& '
	CheckMass** 
(** 
mass** 
?** 
.** 
Value** 
??**  
throw**! &
new**' *!
ArgumentNullException**+ @
(**@ A
nameof**A G
(**G H
mass**H L
)**L M
)**M N
)**N O
;**O P

CheckPrice++ 
(++ 
price++ 
?++ 
.++ 
Amount++  
??++! #
throw++$ )
new++* -!
ArgumentNullException++. C
(++C D
nameof++D J
(++J K
price++K P
)++P Q
)++Q R
)++R S
;++S T
Mass-- 
=-- 
mass-- 
;-- 
Price.. 
=.. 
price.. 
;.. 
NumberInStock00 
=00 
$num00 
;00 
}11 
public33 

void33 

UpdateMass33 
(33 
float33  
value33! &
)33& '
{44 
	CheckMass55 
(55 
value55 
)55 
;55 
Mass66 
=66 
new66 
Mass66 
(66 
value66 
,66 
Mass66 #
?66# $
.66$ %
Unit66% )
??66* ,
ProductInvariants66- >
.66> ?
DefaultMassUnit66? N
)66N O
;66O P
}77 
public99 

void99 
UpdatePrice99 
(99 
decimal99 #
amount99$ *
)99* +
{:: 

CheckPrice;; 
(;; 
amount;; 
);; 
;;; 
Price<< 
=<< 
new<< 
Money<< 
(<< 
amount<<  
,<<  !
Price<<" '
?<<' (
.<<( )
Currency<<) 1
??<<2 4
ProductInvariants<<5 F
.<<F G 
DefaultPriceCurrency<<G [
)<<[ \
;<<\ ]
}== 
[?? 
MemberNotNull?? 
(?? 
nameof?? 
(?? 
Name?? 
)?? 
)??  
]??  !
public@@ 

void@@ 

UpdateName@@ 
(@@ 
string@@ !
value@@" '
)@@' (
{AA 
ifBB 

(BB 
stringBB 
.BB 
IsNullOrWhiteSpaceBB %
(BB% &
valueBB& +
)BB+ ,
)BB, -
throwCC 
newCC 
ArgumentExceptionCC '
(CC' (
$strCC( ?
)CC? @
;CC@ A
ifEE 

(EE 
valueEE 
.EE 
LengthEE 
>EE 
ProductInvariantsEE ,
.EE, -
NameMaxLengthEE- :
)EE: ;
throwFF 
newFF 
ArgumentExceptionFF '
(FF' (
$"FF( *
$strFF* ;
{FF; <
valueFF< A
.FFA B
LengthFFB H
}FFH I
$strFFI h
{FFh i
ProductInvariantsFFi z
.FFz {
NameMaxLength	FF{ à
}
FFà â
$str
FFâ ã
"
FFã å
)
FFå ç
;
FFç é
NameHH 
=HH 
valueHH 
;HH 
}II 
[KK 
MemberNotNullKK 
(KK 
nameofKK 
(KK 
DescriptionKK %
)KK% &
)KK& '
]KK' (
publicLL 

voidLL 
UpdateDescriptionLL !
(LL! "
stringLL" (
valueLL) .
)LL. /
{MM 
ifNN 

(NN 
stringNN 
.NN 
IsNullOrWhiteSpaceNN %
(NN% &
valueNN& +
)NN+ ,
)NN, -
throwOO 
newOO 
ArgumentExceptionOO '
(OO' (
$strOO( F
)OOF G
;OOG H
ifQQ 

(QQ 
valueQQ 
.QQ 
LengthQQ 
>QQ 
ProductInvariantsQQ ,
.QQ, - 
DescriptionMaxLengthQQ- A
)QQA B
throwRR 
newRR 
ArgumentExceptionRR '
(RR' (
$"RR( *
$strRR* ;
{RR; <
valueRR< A
.RRA B
LengthRRB H
}RRH I
$strRRI o
{RRo p
ProductInvariants	RRp Å
.
RRÅ Ç
NameMaxLength
RRÇ è
}
RRè ê
$str
RRê í
"
RRí ì
)
RRì î
;
RRî ï
DescriptionTT 
=TT 
valueTT 
;TT 
}UU 
internalZZ 
voidZZ 
RecordTransactionZZ #
(ZZ# $
TransactionLineZZ$ 3
transactionLineZZ4 C
)ZZC D
{[[ 
if\\ 

(\\ 
transactionLine\\ 
.\\ 
Quantity\\ $
<\\% &
$num\\' (
)\\( )
throw]] 
new]] 
ArgumentException]] '
(]]' (
$str]]( _
)]]_ `
;]]` a
switch__ 
(__ 
transactionLine__ 
.__  
Transaction__  +
.__+ ,
TransactionType__, ;
)__; <
{`` 	
caseaa 
TransactionTypeaa  
.aa  !
Salesaa! &
:aa& '
ifbb 
(bb 
transactionLinebb #
.bb# $
Quantitybb$ ,
>bb- .
NumberInStockbb/ <
)bb< =
throwcc 
newcc &
InsufficientStockExceptioncc 8
(cc8 9
thiscc9 =
,cc= >
transactionLinecc? N
.ccN O
QuantityccO W
,ccW X
NumberInStockccY f
)ccf g
;ccg h
NumberInStockdd 
-=dd  
transactionLinedd! 0
.dd0 1
Quantitydd1 9
;dd9 :
breakee 
;ee 
caseff 
TransactionTypeff  
.ff  !
Procurementff! ,
:ff, -
NumberInStockgg 
+=gg  
transactionLinegg! 0
.gg0 1
Quantitygg1 9
;gg9 :
breakhh 
;hh 
defaultii 
:ii 
throwjj 
newjj (
InvalidEnumArgumentExceptionjj 6
(jj6 7
$"jj7 9
$strjj9 D
{jjD E
nameofjjE K
(jjK L
TransactionTypejjL [
)jj[ \
}jj\ ]
$strjj] `
{jj` a
transactionLinejja p
.jjp q
Transactionjjq |
.jj| }
TransactionType	jj} å
}
jjå ç
$str
jjç è
"
jjè ê
)
jjê ë
;
jjë í
}kk 	
}ll 
privatenn 
staticnn 
voidnn 
	CheckMassnn !
(nn! "
floatnn" '
valuenn( -
)nn- .
{oo 
ifpp 

(pp 
valuepp 
<pp 
ProductInvariantspp %
.pp% &
MassMinimumpp& 1
)pp1 2
throwqq 
newqq 
ArgumentExceptionqq '
(qq' (
$"qq( *
$strqq* 1
{qq1 2
valueqq2 7
}qq7 8
$strqq8 g
{qqg h
ProductInvariantsqqh y
.qqy z
MassMinimum	qqz Ö
}
qqÖ Ü
$str
qqÜ á
"
qqá à
)
qqà â
;
qqâ ä
}rr 
privatett 
statictt 
voidtt 

CheckPricett "
(tt" #
decimaltt# *
amounttt+ 1
)tt1 2
{uu 
ifvv 

(vv 
amountvv 
<vv 
ProductInvariantsvv &
.vv& '
PriceMinimumvv' 3
)vv3 4
throwww 
newww 
ArgumentExceptionww '
(ww' (
$"ww( *
$strww* 2
{ww2 3
amountww3 9
}ww9 :
$strww: j
{wwj k
ProductInvariantswwk |
.ww| }
MassMinimum	ww} à
}
wwà â
$str
wwâ ä
"
wwä ã
)
wwã å
;
wwå ç
}xx 
}yy Ò	
NC:\Users\csingare\Desktop\MyWarehouse\src\Domain\Products\ProductInvariants.cs
	namespace 	
MyWarehouse
 
. 
Domain 
. 
Products %
;% &
public 
static 
class 
ProductInvariants %
{ 
public 

const 
int 
NameMaxLength "
=# $
$num% (
;( )
public		 

const		 
int		  
DescriptionMaxLength		 )
=		* +
$num		, 0
;		0 1
public 

const 
float 
MassMinimum "
=# $
$num% )
;) *
public 

const 
decimal 
PriceMinimum %
=& '
$num( ,
;, -
public 

static 
readonly 
MassUnit #
DefaultMassUnit$ 3
=4 5
MassUnit6 >
.> ?
Kilogram? G
;G H
public 

static 
readonly 
Currency # 
DefaultPriceCurrency$ 8
=9 :
Currency; C
.C D
USDD G
;G H
} Å&
LC:\Users\csingare\Desktop\MyWarehouse\src\Domain\Transactions\Transaction.cs
	namespace 	
MyWarehouse
 
. 
Domain 
. 
Transactions )
;) *
public 
class 
Transaction 
: 
MyEntity #
{ 
public 

TransactionType 
TransactionType *
{+ ,
get- 0
;0 1
private2 9
set: =
;= >
}? @
[ 
Required 
] 
public 

Money 
Total 
{ 
get 
; 
private %
set& )
;) *
}+ ,
=- .
new/ 2
Money3 8
(8 9
$num9 :
,: ;
Currency< D
.D E
USDE H
)H I
;I J
public 

int 
	PartnerId 
{ 
get 
; 
private  '
set( +
;+ ,
}- .
public 

virtual 
Partner 
Partner "
{# $
get% (
;( )
private* 1
set2 5
;5 6
}7 8
public 

virtual 
IReadOnlyCollection &
<& '
TransactionLine' 6
>6 7
TransactionLines8 H
=>I K
_transactionLinesL ]
.] ^

AsReadOnly^ h
(h i
)i j
;j k
private 
readonly 
List 
< 
TransactionLine )
>) *
_transactionLines+ <
== >
new? B
(B C
)C D
;D E
private 
Transaction 
( 
) 
{ 
Partner 
= 
null 
! 
; 
} 
internal 
Transaction 
( 
TransactionType (
type) -
,- .
Partner/ 6
partner7 >
)> ?
{   
TransactionType!! 
=!! 
type!! 
;!! 
Partner"" 
="" 
partner"" 
;"" 
}## 
internal%% 
void%% 
AddTransactionLine%% $
(%%$ %
Product%%% ,
product%%- 4
,%%4 5
int%%6 9
quantity%%: B
)%%B C
{&& 
if'' 

('' 
product'' 
=='' 
null'' 
)'' 
throw(( 
new(( !
ArgumentNullException(( +
(((+ ,
nameof((, 2
(((2 3
product((3 :
)((: ;
)((; <
;((< =
if** 

(** 
quantity** 
<** 
$num** 
)** 
throw++ 
new++ 
ArgumentException++ '
(++' (
$str++( S
,++S T
nameof++U [
(++[ \
quantity++\ d
)++d e
)++e f
;++f g
var// 
transactionLine// 
=// 
new// !
TransactionLine//" 1
(//1 2
)//2 3
{00 	
Transaction11 
=11 
this11 
,11 
Product22 
=22 
product22 
,22 
Quantity33 
=33 
quantity33 
,33  
	UnitPrice44 
=44 
product44 
.44  
Price44  %
.44% &
Copy44& *
(44* +
)44+ ,
}55 	
;55	 

product77 
.77 
RecordTransaction77 !
(77! "
transactionLine77" 1
)771 2
;772 3
_transactionLines99 
.99 
Add99 
(99 
transactionLine99 -
)99- .
;99. /
var;; 
currency;; 
=;; 
_transactionLines;; (
.;;( )
First;;) .
(;;. /
);;/ 0
.;;0 1
	UnitPrice;;1 :
.;;: ;
Currency;;; C
;;;C D
Total<< 
=<< 
TransactionLines<<  
.<<  !
	Aggregate<<! *
(<<* +
new<<+ .
Money<</ 4
(<<4 5
$num<<5 6
,<<6 7
currency<<8 @
)<<@ A
,<<A B
(== 
total== 
,== 
line== 
)== 
=>== 
total== "
+==# $
(==% &
line==& *
.==* +
	UnitPrice==+ 4
*==5 6
line==7 ;
.==; <
Quantity==< D
)==D E
)==E F
;==F G
}>> 
}?? ö
PC:\Users\csingare\Desktop\MyWarehouse\src\Domain\Transactions\TransactionLine.cs
	namespace 	
MyWarehouse
 
. 
Domain 
. 
Transactions )
;) *
public 
class 
TransactionLine 
: 
IEntity &
{ 
public 

int 
Id 
{ 
get 
; 
private  
set! $
;$ %
}& '
[ 
Required 
] 
public 

int 
	ProductId 
{ 
get 
; 
init  $
;$ %
}& '
public 

virtual 
Product 
Product "
{# $
get% (
;( )
init* .
;. /
}0 1
=2 3
null4 8
!8 9
;9 :
[ 
Required 
] 
public 

Transaction 
Transaction "
{# $
get% (
;( )
init* .
;. /
}0 1
=2 3
null4 8
!8 9
;9 :
[ 
Range 

(
 
$num 
, 
int 
. 
MaxValue 
) 
] 
public 

int 
Quantity 
{ 
get 
; 
init #
;# $
}% &
[ 
Required 
] 
public 

Money 
	UnitPrice 
{ 
get  
;  !
init" &
;& '
}( )
=* +
null, 0
!0 1
;1 2
internal 
TransactionLine 
( 
) 
{  
}! "
} ä
PC:\Users\csingare\Desktop\MyWarehouse\src\Domain\Transactions\TransactionType.cs
	namespace 	
MyWarehouse
 
. 
Domain 
; 
public 
enum 
TransactionType 
{ 
Sales 	
=
 
$num 
, 
Procurement 
= 
$num 
} 